<!DOCTYPE HTML>
<html>
  <head>
<style>

.header {
  text-align: center;
}
.autocomplete-wrapper {
  font-size: x-large;
  margin: 1rem;
}
#autoComplete {
  font-size: x-large;
  height: 1.5em;
  border: 0.5rem double rgba(13, 86, 12, 0.3);
}
.result {
  max-width: 80rem;
  padding: 1rem;
  background-color: rgba(89, 58, 50, 0.1);
}
.result:nth-child(even) {
  background-color: rgba(161, 168, 180, 0.1);
}
.resultDescription {
  text-align: left;
  overflow-y: hidden;
  text-overflow: ellipsis;
}
.resultDescription.long {
  max-height: 8rem;
  cursor: s-resize;
  box-shadow: 0 -1rem 1rem -1rem inset rgba(49, 12, 23, 0.2);
}
.resultDescription.long.open {
  max-height: initial;
  cursor: n-resize;
}
.resultLinks {
  margin: 1rem;
}
.resultLinks a {
  margin: 0.5rem;
  padding: 0.5rem;
  font-size: large;
  font-weight: 300;
  background-color: rgba(20, 22, 99, 0.1);
  border-radius: 1rem;
}
.attachments {
  margin: 1rem;
}
.attachments a {
  margin: 0.5rem;
  padding: 0.5rem;
}

</style>
<script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"></script>
<script>

  const items = <%ITEMS%>;
  const bodies = <%BODIES%>;
  const events = <%EVENTS%>;
  const keys = Object.keys(items);
  const maxResults = 25;
  const search = (term_) => {
    const term = term_.toLowerCase();
    const results = [];
    keys.filter(key => key.startsWith(term))
        .forEach(k => results.push(...items[k]));
    if (results.length > maxResults) {
      return results.slice(0, maxResults);
    }
    keys.filter(key => key.includes(' ' + term))
        .forEach(k => results.push(...items[k]));
    return results.slice(0, maxResults);
  }

  window.onload = () => {
    const acEl = document.getElementById('autoComplete');
    const resEl = document.getElementById('results');
    const onType = () => {
      const value = acEl.value;
      resEl.innerHTML = '';
      if (value.length < 1) {
        return;
      }
      const results = search(value);
      //console.log(results);
      results.forEach(res => {
        const event = events[res.eventid];
        const body = bodies[event.body];
        const div = document.createElement('div');
        div.className = 'result';

        //title
        const title = document.createElement('h3');
        title.textContent = res.agendanumber + ' ' + res.title;
        div.appendChild(title);

        //subtitle
        const doctype = document.createElement('div');
        doctype.textContent = body + ' - ' + event.date.split('T')[0] + ' ' + event.time;
        div.appendChild(doctype);

        //meeting links
        const links = document.createElement('div');
        links.className = 'resultLinks';
        const ilink = document.createElement('a');
        ilink.setAttribute('href', event.insiteurl);
        ilink.textContent = 'info';
        links.appendChild(ilink);
        if (event.agenda) {
          const alink = document.createElement('a');
          alink.setAttribute('href', event.agenda);
          alink.textContent = 'agenda';
          links.appendChild(alink);
        }
        if (event.minutes) {
          const mlink = document.createElement('a');
          mlink.setAttribute('href', event.minutes);
          mlink.textContent = 'minutes';
          links.appendChild(mlink);
        }
        div.appendChild(links);

        if (res.matterattachments !== '{}') {
          console.log(res, res.matterattachments);
          const attachments = JSON.parse(res.matterattachments);
          const atta = document.createElement('div');
          atta.className = 'attachments'
          Object.keys(attachments).forEach((name) => {
            const link = document.createElement('a');
            link.textContent = '\u{1F4CE}' + name;
            link.setAttribute('href', attachments[name]);
            atta.appendChild(link);
          });
          div.appendChild(atta);
        }

        //description
        if (res.actiontext) {
          const desc = document.createElement('div');
          const lines = res.actiontext.split('\n');
          desc.className = 'resultDescription';
          if (lines.length > 5) {
            desc.classList.add('long');
            desc.onclick = () => desc.classList.toggle('open');
          }
          lines.forEach((line) => {
              const p = document.createElement('p');
              p.textContent = line;
              desc.appendChild(p);
          });
          div.appendChild(desc);
        }

        resEl.appendChild(div);
      });
    };
    acEl.addEventListener('input', onType);
    onType();
  };
  
  //fetch("http://www.jisaacstone.com/data/minutes.json").then(response => response.json()).then(json => document.minutes = json);
</script>
  </head>
  <body>
    <div class="container">
      <header class="header">
        <h1>Search Mountain View City Council Meeting Minutes</h1>
      </header>
      <div class="body" align="center">
        <div class="autoComplete_wrapper">
          <input id="autoComplete" type="text" tabindex="1">
        </div>
        <div id="results">
        </div>
      </div>
    </div>
  </body>
</html>
