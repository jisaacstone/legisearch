<!DOCTYPE HTML>
<html>
  <head>
<style>

a, span {
  display: inline-block;
}
a:hover {
  color: #60b;
}
a:visited {
  color: #f89;
}
.header {
  text-align: center;
}
.autocomplete-wrapper {
  font-size: x-large;
  margin: 1rem;
}
#autoComplete {
  font-size: x-large;
  height: 1.5em;
  border: 0.5rem double rgba(13, 86, 12, 0.3);
}
#filters {
  display: flex;
  flex-wrap: wrap;
  height: 3rem;
  overflow-x: hidden;
  box-shadow: 0 -1rem 1rem -1rem inset rgba(49, 12, 23, 0.3);
  margin-bottom: 0.5rem;
}
#filterhead {
  cursor: pointer;
}
#filters.open {
  height: initial;
}
.filterlist {
  display: flex;
  flex-wrap: wrap;
}
.filter {
  flex-grow: 1;
  padding: 0.1rem;
  margin: 0.1rem;
  border-radius: 0.1rem 0.2rem;
  box-shadow: 0 0 0.3rem inset rgba(25, 25, 30, 0.2);
}
.filter.checked {
  background-color: rgba(150, 200, 150, 0.1);
  box-shadow: 0 0 0.3rem inset rgba(25, 225, 30, 0.3);
}
.result {
  max-width: 80rem;
  padding: 1rem;
  position: relative;
  background-color: rgba(89, 58, 50, 0.1);

  overflow-y: hidden;
  text-overflow: ellipsis;
  max-height: 10rem;

  display: flex;
  flex-wrap: wrap;
}
.result > * {
  flex-grow: 1;
}
.result.long {
  cursor: s-resize;
  box-shadow: 0 -1rem 1rem -1rem inset rgba(49, 12, 23, 0.3);
}
.result.long.open {
  max-height: initial;
  cursor: n-resize;
  box-shadow: initial;
}
.result:nth-child(even) {
  background-color: rgba(161, 168, 180, 0.1);
}
.resultTitle {
  margin: 0.5rem;
  text-align: left;
  width: 100%;
}
.resultDescription {
  text-align: left;
  width: 100%;
}
.matter {
  text-align: left;
  align-self: center;
}
.meetinginfo {
  text-align: left;
  align-self: center;
}
.meetinginfo div:nth-child(1) {
  font-weight: 500;
  text-shadow: 0.1rem 0.1rem 0.1rem rgba(200, 100, 110, 0.1);
}
.resultLinks {
  flex-grow: 0;
  align-self: center;
}
.resultLinks a, .resultLinks span {
  margin: 0.5rem;
  padding: 0.5rem;
  font-size: large;
  font-weight: 300;
  background-color: rgba(20, 22, 99, 0.1);
  border-radius: 1rem;
  min-width: 7rem;
  text-align: center;
}
.attachments {
  margin: 0 0.5rem;
}
.attachments a {
  margin: 0.1rem;
  padding: 0.1rem;
}
.passed:before {
  content: '\2611';
}

</style>
<script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"></script>
<script>
// Items are indexed by title. If we want to support searching other fields we'd need to rework this
const items = <%ITEMS%>;
const bodies = <%BODIES%>;
const events = <%EVENTS%>;
const settings = {
  maxResults: 75,
  bodies: new Set(Object.keys(bodies))
};

const search = (term_) => {
  // Could not find a library that did even basic things like start of word matches being found first
  // This function is kinda dumb but works. Might be good enough?
  const term = term_.toLowerCase();
  const results = [];
  const keys = Object.keys(items);
  const addVals = (k) => {
    //remove the key so it doesn't show in other filters
    keys.splice(keys.indexOf(k), 1);
    items[k].forEach((item) => {
      console.log(events[item.eventid].body, settings.bodies);
      if (settings.bodies.has(events[item.eventid].body.toString())) {
        results.push(item);
      }
    });
  };
  //starting with
  keys.filter(key => key.startsWith(term)).forEach(addVals);
  if (results.length > settings.maxResults) {
    return results.slice(0, settings.maxResults);
  }
  //word starts with
  keys.filter(key => key.includes(' ' + term)).forEach(addVals);
  if (results.length > settings.maxResults) {
    return results.slice(0, settings.maxResults);
  }
  //word contains
  keys.filter(key => key.includes(term)).forEach(addVals);
  if (results.length > settings.maxResults) {
    return results.slice(0, settings.maxResults);
  }
  //word contains any
  const terms = term.split(" ");
  keys.filter(key => terms.every((t) => key.includes(t))).forEach(addVals);
  return results.slice(0, settings.maxResults);
}

const makeFilters = (filterEl, callback) => {
  const bodyFilter = document.createElement('div');
  bodyFilter.className = 'filterlist';
  Object.keys(bodies).forEach((bodyId) => {
    const filter = document.createElement('div');
    filter.className = 'filter';
    filter.textContent = bodies[bodyId];
    if (settings.bodies.has(bodyId)) {
      filter.classList.add('checked');
    }
    filter.onclick = () => {
      if (filter.classList.contains('checked')) {
        filter.classList.remove('checked');
        settings.bodies.delete(bodyId);
      } else {
        filter.classList.add('checked');
        settings.bodies.add(bodyId);
      }
      callback();
    };
    bodyFilter.appendChild(filter);
  });
  filterEl.appendChild(bodyFilter);
};

const makeResultElement = (res) => {
  const event = events[res.eventid];
  const body = bodies[event.body];
  const result = document.createElement('div');
  result.className = 'result';

  //meeting info
  const doctype = document.createElement('div');
  doctype.className = 'meetinginfo';
  const bodyel = document.createElement('div');
  bodyel.textContent = body;
  bodyel.className = 'body b-' + event.body;
  doctype.appendChild(bodyel);
  const datetime = document.createElement('div')
  datetime.textContent = event.date.split('T')[0] + ' ' + event.time;
  doctype.appendChild(datetime);
  result.appendChild(doctype);

  //matter info
  if (res.mattertype) {
    const matters = document.createElement('div');
    matters.className = 'matter';
    const mtype = document.createElement('div');
    mtype.textContent = res.mattertype;
    mtype.className = 'mtype ' + res.mattertype.toLowerCase().replaceAll(' ', '-');
    matters.appendChild(mtype);
    const mstatus = document.createElement('div');
    mstatus.textContent = res.matterstatus;
    mstatus.className = 'mstatus ' + res.matterstatus.toLowerCase().replaceAll(' ', '-');
    matters.appendChild(mstatus);
    result.appendChild(matters);
  }

  //meeting links
  const links = document.createElement('div');
  links.className = 'resultLinks';
  const ilink = document.createElement('a');
  ilink.setAttribute('href', event.insiteurl);
  ilink.textContent = 'info';
  links.appendChild(ilink);

  var alink;
  if (event.agenda) {
    alink = document.createElement('a');
    alink.setAttribute('href', event.agenda);
  } else {
    alink = document.createElement('span');
    alink.className = 'not-available';
  }
  alink.textContent = 'agenda';
  links.appendChild(alink);

  var mlink;
  if (event.minutes) {
    mlink = document.createElement('a');
    mlink.setAttribute('href', event.minutes);
  } else {
    mlink = document.createElement('span');
    mlink.className = 'not-available';
  }
  mlink.textContent = 'minutes';
  links.appendChild(mlink);

  result.appendChild(links);

  //title
  const title = document.createElement('h3');
  title.className = 'resultTitle';
  title.textContent = res.agendanumber + ' ' + res.title;
  result.appendChild(title);

  //attachments
  if (res.matterattachments !== '{}') {
    const attachments = JSON.parse(res.matterattachments);
    const atta = document.createElement('div');
    atta.className = 'attachments'
    Object.keys(attachments).forEach((name) => {
      const link = document.createElement('a');
      link.textContent = '\u{1F4CE}' + name;
      link.setAttribute('href', attachments[name]);
      atta.appendChild(link);
    });
    result.appendChild(atta);
  }

  //description
  if (res.actiontext) {
    const desc = document.createElement('div');
    const lines = res.actiontext.split('\n');
    desc.className = 'resultDescription';
    lines.forEach((line) => {
        const p = document.createElement('p');
        p.textContent = line;
        desc.appendChild(p);
    });
    result.appendChild(desc);
  }
  return result;
};

window.onload = () => {
  const acEl = document.getElementById('autoComplete');
  const resEl = document.getElementById('results');
  const filEl = document.getElementById('filters');
  const onType = () => {
    const value = acEl.value;
    resEl.innerHTML = '';
    if (value.length < 1) {
      return;
    }
    const results = search(value);
    results.forEach(res => {
      const result = makeResultElement(res);
      resEl.appendChild(result);

      //expand/close action - needs to be added to document before can check overflow
      if (result.scrollHeight > result.clientHeight) {
        result.classList.add('long');
        result.onclick = () => result.classList.toggle('open');
      }
    });
  };
  acEl.addEventListener('input', onType);
  makeFilters(filEl, onType);
  document.getElementById('filterhead').onclick = () => filEl.classList.toggle('open');
  //call immediatly, so page refresh pulls results
  onType();
};

</script>
  <head>
    <title>Councildoc <%NAMESPACE%> QuickSerarch</title>
  </head>
  <body>
    <div class="container">
      <header class="header">
        <h1>Search Meeting Minutes - <%NAMESPACE%></h1>
      </header>
      <div class="body" align="center">
        <div class="autoComplete_wrapper">
          <input id="autoComplete" type="text" tabindex="1">
        </div>
        <div id="filters" class="long">
          <h2 id="filterhead">filters</h2>
        </div>
        <div id="results">
        </div>
      </div>
    </div>
  </body>
</html>
